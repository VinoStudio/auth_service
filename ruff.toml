target-version = "py312"
line-length = 120
indent-width = 4

[lint]
select = ["ALL"]
exclude = [
    ".git",
    ".git-rewrite",
    ".pytest-cache",
    ".eggs",
    ".bzr",
    "__pycache__",
    "venv",
    "env",
    "docs",
    ".idea",
    "build",
    "dist",
    "wheels",
    "tests/*"
]
ignore = [
    #doc strings
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "D106", # Missing docstring in public nested class
    "D107", # Missing docstring in `__init__`
    "D205", # 1 blank line required between summary line and description
    "D300", # Use triple double quotes """
    "D400", # First line should end with a period
    "D401", # First line of docstring should be in imperative mood: "{first_line}"
    "D415", # First line should end with a period, question mark, or exclamation point

    #spicified rules
    "TD002", # Missing author in TODO; try: # TODO(<author_name>):
    "TD003", # Missing issue link for this TODO
    "FIX002", # Line contains TODO, consider resolving the issue
    "N818", # Exception name `{exc_name}` should be named with an Error suffix
    "B008", # Do not perform function call {name} in argument defaults
    "B024", # {name} is an abstract base class, but it has no abstract methods or properties
    "B027", # {name} is an empty method in an abstract base class, but has no abstract decorator
    "S101", # Use of `assert` detected
    "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
    "PLR2004", # Magic value used in comparison, consider replacing {value} with a constant variable
    "ANN401", # Dynamically typed expressions (typing.Any) are disallowed in {name}
    "RET503", # Missing explicit return at the end of function able to return non-None value
    "RET504", # Unnecessary assignment to {name} before return statement
    "TRY003", # Avoid specifying long messages outside the exception class
    "TRY004", # Prefer TypeError exception for invalid type
    "TRY400", # Use logging.exception instead of logging.error
    "EM102", # Exception must not use an f-string literal, assign to variable first
    "N999", # Invalid module name
    "PLR0911", # Too many return statements ({returns} > {max_returns})
    "PLR0913", # Too many arguments in function definition ({c_args} > {max_args})
    "PGH003", # Use specific rule codes when ignoring type issues
    "PGH004", # Use specific rule codes when using `noqa`
    "SIM108", # Use ternary operator {contents} instead of if-else-block
    "ARG005", # Unused lambda argument: `x`
    "FBT001", # Boolean positional arg in function definition
    "FBT002", # Boolean default value in function definition
    "EM101", # Exception must not use a string literal, assign to variable first
    "ISC001", # Implicitly concatenated string literals on one line
    "COM812", # Explicitly concatenated string should be implicitly concatenated
    "TC001", # Move application import {} into a type-checking block
]

[format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"

[lint.isort]
combine-as-imports = true

[lint.mccabe]
max-complexity = 12

[lint.pydocstyle]
convention = "pep257"

[lint.per-file-ignores]
"__init__.py" = ["F401"]